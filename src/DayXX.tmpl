module Day%%DAY%% where

import Control.Monad (guard)
import Data.Function ((&))
import Data.Functor ((<&>))
import Data.List.Split
import Data.List as L
import Data.Array as A
import qualified Data.Set as Set
import qualified Data.Map.Strict as Map
import Data.Char
import Data.Maybe (catMaybes, isJust, fromJust, fromMaybe, mapMaybe)
import Text.ParserCombinators.ReadP as P
import Numeric (readInt)
import Data.Bits ((.&.), (.|.))

import Debug.Trace (trace)

import Lib


{-
-}

parse ls = ls
         & head
         & splitOn "-"
         & map read

day%%DAY%% ls = "hello world"

{-
-}

day%%DAY%%b ls = "hello world"
